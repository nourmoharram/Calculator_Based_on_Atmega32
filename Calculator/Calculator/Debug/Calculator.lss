
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000239a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000239a  0000242e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800092  00800092  00002460  2**0
                  ALLOC
  3 .stab         00002358  00000000  00000000  00002460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011cb  00000000  00000000  000047b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005983  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008767  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009514  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009674  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009901  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a0cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 11 	call	0x22ea	; 0x22ea <main>
      8a:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPinDirection>:
#include"../../../COMMON/Bit_wise.h"
#include"../../../COMMON/STD_Types.h"
#include"../DIO_Header/DIO_Interface.h"
#include"../DIO_Header/DIO_Register.h"
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     b60:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_u8SetPinDirection+0x24>
     b68:	f3 c0       	rjmp	.+486    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	88 23       	and	r24, r24
     b6e:	09 f0       	breq	.+2      	; 0xb72 <DIO_u8SetPinDirection+0x2c>
     b70:	77 c0       	rjmp	.+238    	; 0xc60 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	38 87       	std	Y+8, r19	; 0x08
     b7a:	2f 83       	std	Y+7, r18	; 0x07
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	59 f1       	breq	.+86     	; 0xbdc <DIO_u8SetPinDirection+0x96>
     b86:	2f 81       	ldd	r18, Y+7	; 0x07
     b88:	38 85       	ldd	r19, Y+8	; 0x08
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <DIO_u8SetPinDirection+0x54>
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	69 f0       	breq	.+26     	; 0xbb2 <DIO_u8SetPinDirection+0x6c>
     b98:	60 c0       	rjmp	.+192    	; 0xc5a <DIO_u8SetPinDirection+0x114>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	89 f1       	breq	.+98     	; 0xc06 <DIO_u8SetPinDirection+0xc0>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <DIO_u8SetPinDirection+0x6a>
     bae:	40 c0       	rjmp	.+128    	; 0xc30 <DIO_u8SetPinDirection+0xea>
     bb0:	54 c0       	rjmp	.+168    	; 0xc5a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_u8SetPinDirection+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_u8SetPinDirection+0x86>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	ba c0       	rjmp	.+372    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     bdc:	a7 e3       	ldi	r26, 0x37	; 55
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e3       	ldi	r30, 0x37	; 55
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_u8SetPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_u8SetPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	a5 c0       	rjmp	.+330    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     c06:	a4 e3       	ldi	r26, 0x34	; 52
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_u8SetPinDirection+0xde>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_u8SetPinDirection+0xda>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	90 c0       	rjmp	.+288    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     c30:	a1 e3       	ldi	r26, 0x31	; 49
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e1 e3       	ldi	r30, 0x31	; 49
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_u8SetPinDirection+0x108>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_u8SetPinDirection+0x104>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	7b c0       	rjmp	.+246    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=1; break;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	78 c0       	rjmp	.+240    	; 0xd50 <DIO_u8SetPinDirection+0x20a>

			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	09 f0       	breq	.+2      	; 0xc68 <DIO_u8SetPinDirection+0x122>
     c66:	72 c0       	rjmp	.+228    	; 0xd4c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3e 83       	std	Y+6, r19	; 0x06
     c70:	2d 83       	std	Y+5, r18	; 0x05
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	49 f1       	breq	.+82     	; 0xcce <DIO_u8SetPinDirection+0x188>
     c7c:	2d 81       	ldd	r18, Y+5	; 0x05
     c7e:	3e 81       	ldd	r19, Y+6	; 0x06
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <DIO_u8SetPinDirection+0x14a>
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	61 f0       	breq	.+24     	; 0xca6 <DIO_u8SetPinDirection+0x160>
     c8e:	5b c0       	rjmp	.+182    	; 0xd46 <DIO_u8SetPinDirection+0x200>
     c90:	2d 81       	ldd	r18, Y+5	; 0x05
     c92:	3e 81       	ldd	r19, Y+6	; 0x06
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <DIO_u8SetPinDirection+0x1b0>
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <DIO_u8SetPinDirection+0x1d8>
     ca4:	50 c0       	rjmp	.+160    	; 0xd46 <DIO_u8SetPinDirection+0x200>
						{
						case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     ca6:	aa e3       	ldi	r26, 0x3A	; 58
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ea e3       	ldi	r30, 0x3A	; 58
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_u8SetPinDirection+0x17e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_u8SetPinDirection+0x17a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	41 c0       	rjmp	.+130    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     cce:	a7 e3       	ldi	r26, 0x37	; 55
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e3       	ldi	r30, 0x37	; 55
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_u8SetPinDirection+0x1a6>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_u8SetPinDirection+0x1a2>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	2d c0       	rjmp	.+90     	; 0xd50 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_u8SetPinDirection+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_u8SetPinDirection+0x1ca>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	19 c0       	rjmp	.+50     	; 0xd50 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     d1e:	a1 e3       	ldi	r26, 0x31	; 49
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e1 e3       	ldi	r30, 0x31	; 49
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_u8SetPinDirection+0x1f6>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_u8SetPinDirection+0x1f2>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <DIO_u8SetPinDirection+0x20a>
						default: Local_u8ErrorState=1; break;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_u8SetPinDirection+0x20a>

						}
		}
		else
		{
			Local_u8ErrorState=1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState=0;
     d50:	19 82       	std	Y+1, r1	; 0x01
     d52:	89 81       	ldd	r24, Y+1	; 0x01
}
     d54:	28 96       	adiw	r28, 0x08	; 8
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <DIO_u8SetPortDirection+0x6>
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <DIO_u8SetPortDirection+0x8>
     d6e:	0f 92       	push	r0
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	8a 83       	std	Y+2, r24	; 0x02
     d76:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     d78:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	3d 83       	std	Y+5, r19	; 0x05
     d82:	2c 83       	std	Y+4, r18	; 0x04
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	9d 81       	ldd	r25, Y+5	; 0x05
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	91 05       	cpc	r25, r1
     d8c:	d1 f0       	breq	.+52     	; 0xdc2 <DIO_u8SetPortDirection+0x5c>
     d8e:	2c 81       	ldd	r18, Y+4	; 0x04
     d90:	3d 81       	ldd	r19, Y+5	; 0x05
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	2c f4       	brge	.+10     	; 0xda2 <DIO_u8SetPortDirection+0x3c>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	61 f0       	breq	.+24     	; 0xdb8 <DIO_u8SetPortDirection+0x52>
     da0:	1e c0       	rjmp	.+60     	; 0xdde <DIO_u8SetPortDirection+0x78>
     da2:	2c 81       	ldd	r18, Y+4	; 0x04
     da4:	3d 81       	ldd	r19, Y+5	; 0x05
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	81 f0       	breq	.+32     	; 0xdcc <DIO_u8SetPortDirection+0x66>
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 05       	cpc	r25, r1
     db4:	81 f0       	breq	.+32     	; 0xdd6 <DIO_u8SetPortDirection+0x70>
     db6:	13 c0       	rjmp	.+38     	; 0xdde <DIO_u8SetPortDirection+0x78>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
     db8:	ea e3       	ldi	r30, 0x3A	; 58
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	80 83       	st	Z, r24
     dc0:	0e c0       	rjmp	.+28     	; 0xdde <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	80 83       	st	Z, r24
     dca:	09 c0       	rjmp	.+18     	; 0xdde <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
     dcc:	e4 e3       	ldi	r30, 0x34	; 52
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	80 83       	st	Z, r24
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
     dd6:	e1 e3       	ldi	r30, 0x31	; 49
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	80 83       	st	Z, r24

	}
	return Local_u8ErrorState;
     dde:	89 81       	ldd	r24, Y+1	; 0x01
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	28 97       	sbiw	r28, 0x08	; 8
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	6b 83       	std	Y+3, r22	; 0x03
     e08:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     e0a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	88 30       	cpi	r24, 0x08	; 8
     e10:	08 f0       	brcs	.+2      	; 0xe14 <DIO_u8SetPinValue+0x24>
     e12:	f0 c0       	rjmp	.+480    	; 0xff4 <DIO_u8SetPinValue+0x204>
		{
			if(Copy_u8Value==DIO_u8PIN_LOW)
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	88 23       	and	r24, r24
     e18:	09 f0       	breq	.+2      	; 0xe1c <DIO_u8SetPinValue+0x2c>
     e1a:	77 c0       	rjmp	.+238    	; 0xf0a <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	38 87       	std	Y+8, r19	; 0x08
     e24:	2f 83       	std	Y+7, r18	; 0x07
     e26:	8f 81       	ldd	r24, Y+7	; 0x07
     e28:	98 85       	ldd	r25, Y+8	; 0x08
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	91 05       	cpc	r25, r1
     e2e:	59 f1       	breq	.+86     	; 0xe86 <DIO_u8SetPinValue+0x96>
     e30:	2f 81       	ldd	r18, Y+7	; 0x07
     e32:	38 85       	ldd	r19, Y+8	; 0x08
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	2c f4       	brge	.+10     	; 0xe44 <DIO_u8SetPinValue+0x54>
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	69 f0       	breq	.+26     	; 0xe5c <DIO_u8SetPinValue+0x6c>
     e42:	60 c0       	rjmp	.+192    	; 0xf04 <DIO_u8SetPinValue+0x114>
     e44:	2f 81       	ldd	r18, Y+7	; 0x07
     e46:	38 85       	ldd	r19, Y+8	; 0x08
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	89 f1       	breq	.+98     	; 0xeb0 <DIO_u8SetPinValue+0xc0>
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	83 30       	cpi	r24, 0x03	; 3
     e54:	91 05       	cpc	r25, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <DIO_u8SetPinValue+0x6a>
     e58:	40 c0       	rjmp	.+128    	; 0xeda <DIO_u8SetPinValue+0xea>
     e5a:	54 c0       	rjmp	.+168    	; 0xf04 <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     e5c:	ab e3       	ldi	r26, 0x3B	; 59
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	eb e3       	ldi	r30, 0x3B	; 59
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_u8SetPinValue+0x8a>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_u8SetPinValue+0x86>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	b7 c0       	rjmp	.+366    	; 0xff4 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     e86:	a8 e3       	ldi	r26, 0x38	; 56
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_u8SetPinValue+0xb4>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_u8SetPinValue+0xb0>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	a2 c0       	rjmp	.+324    	; 0xff4 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     eb0:	a5 e3       	ldi	r26, 0x35	; 53
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e3       	ldi	r30, 0x35	; 53
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_u8SetPinValue+0xde>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_u8SetPinValue+0xda>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	8d c0       	rjmp	.+282    	; 0xff4 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
     eda:	a2 e3       	ldi	r26, 0x32	; 50
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e2 e3       	ldi	r30, 0x32	; 50
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_u8SetPinValue+0x108>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_u8SetPinValue+0x104>
     efc:	80 95       	com	r24
     efe:	84 23       	and	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	78 c0       	rjmp	.+240    	; 0xff4 <DIO_u8SetPinValue+0x204>
				default: Local_u8ErrorState=1; break;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	75 c0       	rjmp	.+234    	; 0xff4 <DIO_u8SetPinValue+0x204>

				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	09 f0       	breq	.+2      	; 0xf12 <DIO_u8SetPinValue+0x122>
     f10:	71 c0       	rjmp	.+226    	; 0xff4 <DIO_u8SetPinValue+0x204>
			{
				switch(Copy_u8Port)
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3e 83       	std	Y+6, r19	; 0x06
     f1a:	2d 83       	std	Y+5, r18	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	49 f1       	breq	.+82     	; 0xf78 <DIO_u8SetPinValue+0x188>
     f26:	2d 81       	ldd	r18, Y+5	; 0x05
     f28:	3e 81       	ldd	r19, Y+6	; 0x06
     f2a:	22 30       	cpi	r18, 0x02	; 2
     f2c:	31 05       	cpc	r19, r1
     f2e:	2c f4       	brge	.+10     	; 0xf3a <DIO_u8SetPinValue+0x14a>
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	61 f0       	breq	.+24     	; 0xf50 <DIO_u8SetPinValue+0x160>
     f38:	5b c0       	rjmp	.+182    	; 0xff0 <DIO_u8SetPinValue+0x200>
     f3a:	2d 81       	ldd	r18, Y+5	; 0x05
     f3c:	3e 81       	ldd	r19, Y+6	; 0x06
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	71 f1       	breq	.+92     	; 0xfa0 <DIO_u8SetPinValue+0x1b0>
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	91 05       	cpc	r25, r1
     f4c:	e9 f1       	breq	.+122    	; 0xfc8 <DIO_u8SetPinValue+0x1d8>
     f4e:	50 c0       	rjmp	.+160    	; 0xff0 <DIO_u8SetPinValue+0x200>
							{
							case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
     f50:	ab e3       	ldi	r26, 0x3B	; 59
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	eb e3       	ldi	r30, 0x3B	; 59
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_u8SetPinValue+0x17e>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_u8SetPinValue+0x17a>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	3e c0       	rjmp	.+124    	; 0xff4 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
     f78:	a8 e3       	ldi	r26, 0x38	; 56
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_u8SetPinValue+0x1a6>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_u8SetPinValue+0x1a2>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	2a c0       	rjmp	.+84     	; 0xff4 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
     fa0:	a5 e3       	ldi	r26, 0x35	; 53
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e3       	ldi	r30, 0x35	; 53
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_u8SetPinValue+0x1ce>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_u8SetPinValue+0x1ca>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	16 c0       	rjmp	.+44     	; 0xff4 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
     fc8:	a2 e3       	ldi	r26, 0x32	; 50
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e2 e3       	ldi	r30, 0x32	; 50
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_u8SetPinValue+0x1f6>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_u8SetPinValue+0x1f2>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_u8SetPinValue+0x204>
							default: Local_u8ErrorState=1; break;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01

							}
			}

}
	return Local_u8ErrorState;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01

}
     ff6:	28 96       	adiw	r28, 0x08	; 8
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_u8SetPortValue+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_u8SetPortValue+0x8>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    101a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3d 83       	std	Y+5, r19	; 0x05
    1024:	2c 83       	std	Y+4, r18	; 0x04
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	91 05       	cpc	r25, r1
    102e:	d1 f0       	breq	.+52     	; 0x1064 <DIO_u8SetPortValue+0x5c>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	2c f4       	brge	.+10     	; 0x1044 <DIO_u8SetPortValue+0x3c>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	61 f0       	breq	.+24     	; 0x105a <DIO_u8SetPortValue+0x52>
    1042:	1e c0       	rjmp	.+60     	; 0x1080 <DIO_u8SetPortValue+0x78>
    1044:	2c 81       	ldd	r18, Y+4	; 0x04
    1046:	3d 81       	ldd	r19, Y+5	; 0x05
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	81 f0       	breq	.+32     	; 0x106e <DIO_u8SetPortValue+0x66>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	81 f0       	breq	.+32     	; 0x1078 <DIO_u8SetPortValue+0x70>
    1058:	13 c0       	rjmp	.+38     	; 0x1080 <DIO_u8SetPortValue+0x78>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    105a:	eb e3       	ldi	r30, 0x3B	; 59
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	80 83       	st	Z, r24
    1062:	0e c0       	rjmp	.+28     	; 0x1080 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 83       	st	Z, r24
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    106e:	e5 e3       	ldi	r30, 0x35	; 53
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	80 83       	st	Z, r24
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	80 83       	st	Z, r24

		}
	return Local_u8ErrorState;
    1080:	89 81       	ldd	r24, Y+1	; 0x01

}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DIO_u8GetPinValue>:
	return Local_u8ErrorState;
}
*/

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_u8GetPinValue+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <DIO_u8GetPinValue+0x8>
    109a:	0f 92       	push	r0
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_return_data=0;
    10a4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <DIO_u8GetPinValue+0x1c>
    10ac:	6b c0       	rjmp	.+214    	; 0x1184 <DIO_u8GetPinValue+0xf2>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	88 30       	cpi	r24, 0x08	; 8
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <DIO_u8GetPinValue+0x24>
    10b4:	67 c0       	rjmp	.+206    	; 0x1184 <DIO_u8GetPinValue+0xf2>
	{
		switch(Copy_u8Port)
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3d 83       	std	Y+5, r19	; 0x05
    10be:	2c 83       	std	Y+4, r18	; 0x04
    10c0:	4c 81       	ldd	r20, Y+4	; 0x04
    10c2:	5d 81       	ldd	r21, Y+5	; 0x05
    10c4:	41 30       	cpi	r20, 0x01	; 1
    10c6:	51 05       	cpc	r21, r1
    10c8:	41 f1       	breq	.+80     	; 0x111a <DIO_u8GetPinValue+0x88>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	91 05       	cpc	r25, r1
    10d2:	34 f4       	brge	.+12     	; 0x10e0 <DIO_u8GetPinValue+0x4e>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	21 15       	cp	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <DIO_u8GetPinValue+0x64>
    10de:	52 c0       	rjmp	.+164    	; 0x1184 <DIO_u8GetPinValue+0xf2>
    10e0:	4c 81       	ldd	r20, Y+4	; 0x04
    10e2:	5d 81       	ldd	r21, Y+5	; 0x05
    10e4:	42 30       	cpi	r20, 0x02	; 2
    10e6:	51 05       	cpc	r21, r1
    10e8:	51 f1       	breq	.+84     	; 0x113e <DIO_u8GetPinValue+0xac>
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	b9 f1       	breq	.+110    	; 0x1162 <DIO_u8GetPinValue+0xd0>
    10f4:	47 c0       	rjmp	.+142    	; 0x1184 <DIO_u8GetPinValue+0xf2>
		{
		case DIO_u8PORTA: Local_return_data= GET_BIT(PINA , Copy_u8Pin); break;
    10f6:	e9 e3       	ldi	r30, 0x39	; 57
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_u8GetPinValue+0x7c>
    110a:	55 95       	asr	r21
    110c:	47 95       	ror	r20
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_u8GetPinValue+0x78>
    1112:	ca 01       	movw	r24, r20
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	35 c0       	rjmp	.+106    	; 0x1184 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTB: Local_return_data= GET_BIT(PINB , Copy_u8Pin); break;
    111a:	e6 e3       	ldi	r30, 0x36	; 54
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_u8GetPinValue+0xa0>
    112e:	55 95       	asr	r21
    1130:	47 95       	ror	r20
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_u8GetPinValue+0x9c>
    1136:	ca 01       	movw	r24, r20
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	23 c0       	rjmp	.+70     	; 0x1184 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTC: Local_return_data= GET_BIT(PINC , Copy_u8Pin); break;
    113e:	e3 e3       	ldi	r30, 0x33	; 51
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8GetPinValue+0xc4>
    1152:	55 95       	asr	r21
    1154:	47 95       	ror	r20
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_u8GetPinValue+0xc0>
    115a:	ca 01       	movw	r24, r20
    115c:	81 70       	andi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	11 c0       	rjmp	.+34     	; 0x1184 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTD: Local_return_data= GET_BIT(PIND , Copy_u8Pin); break;
    1162:	e0 e3       	ldi	r30, 0x30	; 48
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_u8GetPinValue+0xe8>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_u8GetPinValue+0xe4>
    117e:	ca 01       	movw	r24, r20
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//Local_u8ErrorState=1;
	}
	return Local_return_data;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <CLCD_voidSendCommand>:
#include"CLCD_Interface.h"
#include"CLCD_Private.h"
#include <util/delay.h>

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	2f 97       	sbiw	r28, 0x0f	; 15
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for sending commands*/
	DIO_u8SetPortDirection(CLCD_CTRL_PORT,DIO_u8PORT_OUTPUT);
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	6f ef       	ldi	r22, 0xFF	; 255
    11b0:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_u8SetPortDirection>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>

	/*SET RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>

	/*Send command to data pins*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	6f ef       	ldi	r22, 0xFF	; 255
    11cc:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    11d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	82 e0       	ldi	r24, 0x02	; 2
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	b9 01       	movw	r22, r18
    11dc:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	62 e0       	ldi	r22, 0x02	; 2
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b0 e4       	ldi	r27, 0x40	; 64
    11f2:	8b 87       	std	Y+11, r24	; 0x0b
    11f4:	9c 87       	std	Y+12, r25	; 0x0c
    11f6:	ad 87       	std	Y+13, r26	; 0x0d
    11f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1200:	9e 85       	ldd	r25, Y+14	; 0x0e
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a ef       	ldi	r20, 0xFA	; 250
    1208:	54 e4       	ldi	r21, 0x44	; 68
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8f 83       	std	Y+7, r24	; 0x07
    1214:	98 87       	std	Y+8, r25	; 0x08
    1216:	a9 87       	std	Y+9, r26	; 0x09
    1218:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    121a:	6f 81       	ldd	r22, Y+7	; 0x07
    121c:	78 85       	ldd	r23, Y+8	; 0x08
    121e:	89 85       	ldd	r24, Y+9	; 0x09
    1220:	9a 85       	ldd	r25, Y+10	; 0x0a
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <CLCD_voidSendCommand+0xa6>
		__ticks = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <CLCD_voidSendCommand+0x124>
	else if (__tmp > 65535)
    123c:	6f 81       	ldd	r22, Y+7	; 0x07
    123e:	78 85       	ldd	r23, Y+8	; 0x08
    1240:	89 85       	ldd	r24, Y+9	; 0x09
    1242:	9a 85       	ldd	r25, Y+10	; 0x0a
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	4f e7       	ldi	r20, 0x7F	; 127
    124a:	57 e4       	ldi	r21, 0x47	; 71
    124c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <CLCD_voidSendCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1254:	6b 85       	ldd	r22, Y+11	; 0x0b
    1256:	7c 85       	ldd	r23, Y+12	; 0x0c
    1258:	8d 85       	ldd	r24, Y+13	; 0x0d
    125a:	9e 85       	ldd	r25, Y+14	; 0x0e
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	51 e4       	ldi	r21, 0x41	; 65
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9e 83       	std	Y+6, r25	; 0x06
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	0f c0       	rjmp	.+30     	; 0x129c <CLCD_voidSendCommand+0x106>
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <CLCD_voidSendCommand+0xf4>
    128e:	9c 83       	std	Y+4, r25	; 0x04
    1290:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9e 83       	std	Y+6, r25	; 0x06
    129a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <CLCD_voidSendCommand+0xe8>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <CLCD_voidSendCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	6f 81       	ldd	r22, Y+7	; 0x07
    12a8:	78 85       	ldd	r23, Y+8	; 0x08
    12aa:	89 85       	ldd	r24, Y+9	; 0x09
    12ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 83       	std	Y+5, r24	; 0x05
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <CLCD_voidSendCommand+0x130>
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	62 e0       	ldi	r22, 0x02	; 2
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
}
    12d8:	2f 96       	adiw	r28, 0x0f	; 15
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	2f 97       	sbiw	r28, 0x0f	; 15
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for sending data*/

		DIO_u8SetPortDirection(CLCD_CTRL_PORT,DIO_u8PORT_OUTPUT);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	6f ef       	ldi	r22, 0xFF	; 255
    1304:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_u8SetPortDirection>

		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>

		/*SET RW pin to low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>

		/*Send data to data pins*/
		DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	6f ef       	ldi	r22, 0xFF	; 255
    1320:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_u8SetPortDirection>

		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1324:	8f 85       	ldd	r24, Y+15	; 0x0f
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	b9 01       	movw	r22, r18
    1330:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_u8SetPortValue>
		/*Send enable pulse*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	62 e0       	ldi	r22, 0x02	; 2
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e4       	ldi	r27, 0x40	; 64
    1346:	8b 87       	std	Y+11, r24	; 0x0b
    1348:	9c 87       	std	Y+12, r25	; 0x0c
    134a:	ad 87       	std	Y+13, r26	; 0x0d
    134c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1350:	7c 85       	ldd	r23, Y+12	; 0x0c
    1352:	8d 85       	ldd	r24, Y+13	; 0x0d
    1354:	9e 85       	ldd	r25, Y+14	; 0x0e
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	4a ef       	ldi	r20, 0xFA	; 250
    135c:	54 e4       	ldi	r21, 0x44	; 68
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8f 83       	std	Y+7, r24	; 0x07
    1368:	98 87       	std	Y+8, r25	; 0x08
    136a:	a9 87       	std	Y+9, r26	; 0x09
    136c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1382:	88 23       	and	r24, r24
    1384:	2c f4       	brge	.+10     	; 0x1390 <CLCD_voidSendData+0xa6>
		__ticks = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	3f c0       	rjmp	.+126    	; 0x140e <CLCD_voidSendData+0x124>
	else if (__tmp > 65535)
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	4f e7       	ldi	r20, 0x7F	; 127
    139e:	57 e4       	ldi	r21, 0x47	; 71
    13a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	4c f5       	brge	.+82     	; 0x13fa <CLCD_voidSendData+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <CLCD_voidSendData+0x106>
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <CLCD_voidSendData+0xf4>
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	69 f7       	brne	.-38     	; 0x13d2 <CLCD_voidSendData+0xe8>
    13f8:	14 c0       	rjmp	.+40     	; 0x1422 <CLCD_voidSendData+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	6f 81       	ldd	r22, Y+7	; 0x07
    13fc:	78 85       	ldd	r23, Y+8	; 0x08
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <CLCD_voidSendData+0x130>
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
}
    142c:	2f 96       	adiw	r28, 0x0f	; 15
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	2e 97       	sbiw	r28, 0x0e	; 14
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e2       	ldi	r26, 0x20	; 32
    1458:	b2 e4       	ldi	r27, 0x42	; 66
    145a:	8b 87       	std	Y+11, r24	; 0x0b
    145c:	9c 87       	std	Y+12, r25	; 0x0c
    145e:	ad 87       	std	Y+13, r26	; 0x0d
    1460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4a ef       	ldi	r20, 0xFA	; 250
    1470:	54 e4       	ldi	r21, 0x44	; 68
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	8f 83       	std	Y+7, r24	; 0x07
    147c:	98 87       	std	Y+8, r25	; 0x08
    147e:	a9 87       	std	Y+9, r26	; 0x09
    1480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1496:	88 23       	and	r24, r24
    1498:	2c f4       	brge	.+10     	; 0x14a4 <CLCD_voidInit+0x66>
		__ticks = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	3f c0       	rjmp	.+126    	; 0x1522 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    14a4:	6f 81       	ldd	r22, Y+7	; 0x07
    14a6:	78 85       	ldd	r23, Y+8	; 0x08
    14a8:	89 85       	ldd	r24, Y+9	; 0x09
    14aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	3f ef       	ldi	r19, 0xFF	; 255
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	57 e4       	ldi	r21, 0x47	; 71
    14b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b8:	18 16       	cp	r1, r24
    14ba:	4c f5       	brge	.+82     	; 0x150e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	0f c0       	rjmp	.+30     	; 0x1504 <CLCD_voidInit+0xc6>
    14e6:	88 ec       	ldi	r24, 0xC8	; 200
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <CLCD_voidInit+0xb4>
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	69 f7       	brne	.-38     	; 0x14e6 <CLCD_voidInit+0xa8>
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <CLCD_voidInit+0xf0>
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2lines and 5*8 font size*/
	CLCD_voidSendCommand(0b00111000);
    1536:	88 e3       	ldi	r24, 0x38	; 56
    1538:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>

	/*Display on off control display enable,enable cursor and  blink cursor*/
	CLCD_voidSendCommand(0b00001111);
    153c:	8f e0       	ldi	r24, 0x0F	; 15
    153e:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>

	/*clear display*/
	CLCD_voidSendCommand(0b00000001);
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>


}
    1548:	2e 96       	adiw	r28, 0x0e	; 14
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <CLCD_voidSendString>:

void CLCD_voidSendString(char *string)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <CLCD_voidSendString+0x6>
    1560:	0f 92       	push	r0
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9b 83       	std	Y+3, r25	; 0x03
    1568:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;string[counter]!=0;counter++)
    156a:	19 82       	std	Y+1, r1	; 0x01
    156c:	0e c0       	rjmp	.+28     	; 0x158a <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(string[counter]);
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	fc 01       	movw	r30, r24
    157a:	e2 0f       	add	r30, r18
    157c:	f3 1f       	adc	r31, r19
    157e:	80 81       	ld	r24, Z
    1580:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
}

void CLCD_voidSendString(char *string)
{
	u8 counter;
	for(counter=0;string[counter]!=0;counter++)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	9b 81       	ldd	r25, Y+3	; 0x03
    1594:	fc 01       	movw	r30, r24
    1596:	e2 0f       	add	r30, r18
    1598:	f3 1f       	adc	r31, r19
    159a:	80 81       	ld	r24, Z
    159c:	88 23       	and	r24, r24
    159e:	39 f7       	brne	.-50     	; 0x156e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(string[counter]);
	}
}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <CLCD_voidSendNumber>:
}

*/

void CLCD_voidSendNumber(u8 *Copy_u8Num)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <CLCD_voidSendNumber+0x6>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_u8Num[Local_u8Counter]!=0;Local_u8Counter++)
    15bc:	19 82       	std	Y+1, r1	; 0x01
    15be:	0f c0       	rjmp	.+30     	; 0x15de <CLCD_voidSendNumber+0x32>
	{
		CLCD_voidSendData(Copy_u8Num[Local_u8Counter]+'0');
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ca:	fc 01       	movw	r30, r24
    15cc:	e2 0f       	add	r30, r18
    15ce:	f3 1f       	adc	r31, r19
    15d0:	80 81       	ld	r24, Z
    15d2:	80 5d       	subi	r24, 0xD0	; 208
    15d4:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
*/

void CLCD_voidSendNumber(u8 *Copy_u8Num)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_u8Num[Local_u8Counter]!=0;Local_u8Counter++)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	fc 01       	movw	r30, r24
    15ea:	e2 0f       	add	r30, r18
    15ec:	f3 1f       	adc	r31, r19
    15ee:	80 81       	ld	r24, Z
    15f0:	88 23       	and	r24, r24
    15f2:	31 f7       	brne	.-52     	; 0x15c0 <CLCD_voidSendNumber+0x14>
	{
		CLCD_voidSendData(Copy_u8Num[Local_u8Counter]+'0');
	}
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <CLCD_SendNumber>:
void CLCD_SendNumber(u8 Number)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendData(Number+'0');
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	80 5d       	subi	r24, 0xD0	; 208
    1610:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
}
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <CLCD_SendNo>:

void CLCD_SendNo(u16 Number)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	2e 97       	sbiw	r28, 0x0e	; 14
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	9e 87       	std	Y+14, r25	; 0x0e
    1632:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr[10],i=0,j=0;
    1634:	1a 82       	std	Y+2, r1	; 0x02
    1636:	19 82       	std	Y+1, r1	; 0x01
	if(Number == 0)
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	11 f5       	brne	.+68     	; 0x1684 <CLCD_SendNo+0x68>
	{
	  CLCD_voidSendData('0');
    1640:	80 e3       	ldi	r24, 0x30	; 48
    1642:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
    1646:	39 c0       	rjmp	.+114    	; 0x16ba <CLCD_SendNo+0x9e>
	}
	else
	{
	  while(Number)
	  {
		arr[i]=Number%10+'0';
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	e8 2f       	mov	r30, r24
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	2a e0       	ldi	r18, 0x0A	; 10
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 80 11 	call	0x2300	; 0x2300 <__udivmodhi4>
    165c:	28 2f       	mov	r18, r24
    165e:	20 5d       	subi	r18, 0xD0	; 208
    1660:	ce 01       	movw	r24, r28
    1662:	03 96       	adiw	r24, 0x03	; 3
    1664:	e8 0f       	add	r30, r24
    1666:	f9 1f       	adc	r31, r25
    1668:	20 83       	st	Z, r18
		Number/=10;
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	2a e0       	ldi	r18, 0x0A	; 10
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	b9 01       	movw	r22, r18
    1674:	0e 94 80 11 	call	0x2300	; 0x2300 <__udivmodhi4>
    1678:	cb 01       	movw	r24, r22
    167a:	9e 87       	std	Y+14, r25	; 0x0e
    167c:	8d 87       	std	Y+13, r24	; 0x0d
		i++;
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	8a 83       	std	Y+2, r24	; 0x02
	{
	  CLCD_voidSendData('0');
	}
	else
	{
	  while(Number)
    1684:	8d 85       	ldd	r24, Y+13	; 0x0d
    1686:	9e 85       	ldd	r25, Y+14	; 0x0e
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	f1 f6       	brne	.-68     	; 0x1648 <CLCD_SendNo+0x2c>
	  {
		arr[i]=Number%10+'0';
		Number/=10;
		i++;
	  	}
		for(j=i;j>0;j--)
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	11 c0       	rjmp	.+34     	; 0x16b4 <CLCD_SendNo+0x98>
		{
		CLCD_voidSendData(arr[j-1]);
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9c 01       	movw	r18, r24
    169a:	21 50       	subi	r18, 0x01	; 1
    169c:	30 40       	sbci	r19, 0x00	; 0
    169e:	ce 01       	movw	r24, r28
    16a0:	03 96       	adiw	r24, 0x03	; 3
    16a2:	fc 01       	movw	r30, r24
    16a4:	e2 0f       	add	r30, r18
    16a6:	f3 1f       	adc	r31, r19
    16a8:	80 81       	ld	r24, Z
    16aa:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
	  {
		arr[i]=Number%10+'0';
		Number/=10;
		i++;
	  	}
		for(j=i;j>0;j--)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	88 23       	and	r24, r24
    16b8:	61 f7       	brne	.-40     	; 0x1692 <CLCD_SendNo+0x76>
		{
		CLCD_voidSendData(arr[j-1]);
		}
	  }
}
    16ba:	2e 96       	adiw	r28, 0x0e	; 14
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	0f 92       	push	r0
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
	u8 data_clear_display= 0x01;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(data_clear_display);
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>
}
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <CLCD_voidGoToXY+0x6>
    16ee:	0f 92       	push	r0
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	8a 83       	std	Y+2, r24	; 0x02
    16f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos == 0)
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 23       	and	r24, r24
    16fc:	19 f4       	brne	.+6      	; 0x1704 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos == 1)
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	19 f4       	brne	.+6      	; 0x1710 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	80 5c       	subi	r24, 0xC0	; 192
    170e:	89 83       	std	Y+1, r24	; 0x01
	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	CLCD_voidSendCommand(Local_u8Address+128);
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	80 58       	subi	r24, 0x80	; 128
    1714:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar(u8 *Copy_u8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	27 97       	sbiw	r28, 0x07	; 7
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	6d 83       	std	Y+5, r22	; 0x05
    173e:	4e 83       	std	Y+6, r20	; 0x06
    1740:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Iterator;
	/*first calculate CGRAM address whose each block is 8 bytes*/
	u8 Local_u8CGRamAddress =0;
    1742:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGRamAddress = Copy_u8PatternNumber*8;
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	89 83       	std	Y+1, r24	; 0x01

	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	80 5c       	subi	r24, 0xC0	; 192
    175c:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>
	/*Write the pattern into CG ram*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1760:	1a 82       	std	Y+2, r1	; 0x02
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <CLCD_voidWriteSpecialChar+0x5c>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	fc 01       	movw	r30, r24
    1770:	e2 0f       	add	r30, r18
    1772:	f3 1f       	adc	r31, r19
    1774:	80 81       	ld	r24, Z
    1776:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
	Local_u8CGRamAddress = Copy_u8PatternNumber*8;

	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
	/*Write the pattern into CG ram*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 30       	cpi	r24, 0x08	; 8
    1784:	78 f3       	brcs	.-34     	; 0x1764 <CLCD_voidWriteSpecialChar+0x40>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
	}

	/*Access the DDRAM again To display the pattern since the gotoxy function is carrying a function to access DDRAM*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1786:	8e 81       	ldd	r24, Y+6	; 0x06
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <CLCD_voidGoToXY>
	/*Display the pattern written in the CG RAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>


}
    1794:	27 96       	adiw	r28, 0x07	; 7
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <CLCD_voidStop>:

void CLCD_voidStop(void)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	2e 97       	sbiw	r28, 0x0e	; 14
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e2       	ldi	r26, 0x20	; 32
    17c0:	b2 e4       	ldi	r27, 0x42	; 66
    17c2:	8b 87       	std	Y+11, r24	; 0x0b
    17c4:	9c 87       	std	Y+12, r25	; 0x0c
    17c6:	ad 87       	std	Y+13, r26	; 0x0d
    17c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a ef       	ldi	r20, 0xFA	; 250
    17d8:	54 e4       	ldi	r21, 0x44	; 68
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8f 83       	std	Y+7, r24	; 0x07
    17e4:	98 87       	std	Y+8, r25	; 0x08
    17e6:	a9 87       	std	Y+9, r26	; 0x09
    17e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <CLCD_voidStop+0x66>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	3f c0       	rjmp	.+126    	; 0x188a <CLCD_voidStop+0xe4>
	else if (__tmp > 65535)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <CLCD_voidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	6b 85       	ldd	r22, Y+11	; 0x0b
    1826:	7c 85       	ldd	r23, Y+12	; 0x0c
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	0f c0       	rjmp	.+30     	; 0x186c <CLCD_voidStop+0xc6>
    184e:	88 ec       	ldi	r24, 0xC8	; 200
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9c 83       	std	Y+4, r25	; 0x04
    1854:	8b 83       	std	Y+3, r24	; 0x03
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <CLCD_voidStop+0xb4>
    185e:	9c 83       	std	Y+4, r25	; 0x04
    1860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <CLCD_voidStop+0xa8>
    1874:	14 c0       	rjmp	.+40     	; 0x189e <CLCD_voidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	6f 81       	ldd	r22, Y+7	; 0x07
    1878:	78 85       	ldd	r23, Y+8	; 0x08
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	9a 85       	ldd	r25, Y+10	; 0x0a
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <CLCD_voidStop+0xf0>
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
		_delay_ms(40);

		/*Function set command: 2lines and 5*8 font size*/
		CLCD_voidSendCommand(0b00111000);
    189e:	88 e3       	ldi	r24, 0x38	; 56
    18a0:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>

		/*Display on off control display disable,disable cursor and no blink cursor*/
		CLCD_voidSendCommand(0b00001000);
    18a4:	88 e0       	ldi	r24, 0x08	; 8
    18a6:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>

		/*clear display*/
		CLCD_voidSendCommand(0b00000001);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	0e 94 cb 08 	call	0x1196	; 0x1196 <CLCD_voidSendCommand>
}
    18b0:	2e 96       	adiw	r28, 0x0e	; 14
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <KEYPAD_Init>:
#include"Keypad_interface.h"
#include"Keypad_private.h"
#include<util/delay.h>

void KEYPAD_Init(void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	/*Define Row bins as Input*/
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_INPUT);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_INPUT);
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_INPUT);
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_INPUT);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	63 e0       	ldi	r22, 0x03	; 3
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	/*Define column pins as OUTPUT*/
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	65 e0       	ldi	r22, 0x05	; 5
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_OUTPUT);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	66 e0       	ldi	r22, 0x06	; 6
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_OUTPUT);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	67 e0       	ldi	r22, 0x07	; 7
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	/*Define Row bins as pulled up*/
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	62 e0       	ldi	r22, 0x02	; 2
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	/*Define Columns pins as High*/
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	64 e0       	ldi	r22, 0x04	; 4
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	65 e0       	ldi	r22, 0x05	; 5
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_HIGH);
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	66 e0       	ldi	r22, 0x06	; 6
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_HIGH);
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	67 e0       	ldi	r22, 0x07	; 7
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <KPD_u8GetPressedKey>:



char KPD_u8GetPressedKey(void)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	61 97       	sbiw	r28, 0x11	; 17
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
	char Local_u8PressedKey=NOT_PRESSED;
    1984:	19 8a       	std	Y+17, r1	; 0x11
	static u8 Local_u8KPDColumnArr[4]={4,5,6,7};
	static u8 Local_u8KPDRowArr[4]={0,1,2,3};

	//DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<4;Local_u8ColumnIndex++)
    1986:	18 8a       	std	Y+16, r1	; 0x10
    1988:	d7 c0       	rjmp	.+430    	; 0x1b38 <KPD_u8GetPressedKey+0x1c8>
	{
		/*De-Activate current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
    198a:	88 89       	ldd	r24, Y+16	; 0x10
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	fc 01       	movw	r30, r24
    1992:	e5 58       	subi	r30, 0x85	; 133
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	90 81       	ld	r25, Z
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	69 2f       	mov	r22, r25
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>

		/*Check rows*/
		for(Local_u8RowIndex=0;Local_u8RowIndex<4;Local_u8RowIndex++)
    19a2:	1f 86       	std	Y+15, r1	; 0x0f
    19a4:	b6 c0       	rjmp	.+364    	; 0x1b12 <KPD_u8GetPressedKey+0x1a2>
		{
			/*Read current row*/
			//Local_u8Pinstate= DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex]);
			/*check if switch is pressed*/
			if(DIO_u8GetPinValue(DIO_u8PORTA,Local_u8KPDRowArr[Local_u8RowIndex]) == DIO_u8PIN_LOW)
    19a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	fc 01       	movw	r30, r24
    19ae:	e9 58       	subi	r30, 0x89	; 137
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	90 81       	ld	r25, Z
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	69 2f       	mov	r22, r25
    19b8:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8GetPinValue>
    19bc:	88 23       	and	r24, r24
    19be:	09 f0       	breq	.+2      	; 0x19c2 <KPD_u8GetPressedKey+0x52>
    19c0:	a5 c0       	rjmp	.+330    	; 0x1b0c <KPD_u8GetPressedKey+0x19c>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a8 e4       	ldi	r26, 0x48	; 72
    19c8:	b2 e4       	ldi	r27, 0x42	; 66
    19ca:	8b 87       	std	Y+11, r24	; 0x0b
    19cc:	9c 87       	std	Y+12, r25	; 0x0c
    19ce:	ad 87       	std	Y+13, r26	; 0x0d
    19d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a ef       	ldi	r20, 0xFA	; 250
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8f 83       	std	Y+7, r24	; 0x07
    19ec:	98 87       	std	Y+8, r25	; 0x08
    19ee:	a9 87       	std	Y+9, r26	; 0x09
    19f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f2:	6f 81       	ldd	r22, Y+7	; 0x07
    19f4:	78 85       	ldd	r23, Y+8	; 0x08
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <KPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <KPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <KPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <KPD_u8GetPressedKey+0x104>
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 83       	std	Y+4, r25	; 0x04
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <KPD_u8GetPressedKey+0xf2>
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	9e 81       	ldd	r25, Y+6	; 0x06
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <KPD_u8GetPressedKey+0xe6>
    1a7c:	14 c0       	rjmp	.+40     	; 0x1aa6 <KPD_u8GetPressedKey+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <KPD_u8GetPressedKey+0x12e>
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
			{
				//DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);

				_delay_ms(50);

				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	88 89       	ldd	r24, Y+16	; 0x10
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	82 0f       	add	r24, r18
    1abe:	93 1f       	adc	r25, r19
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	e1 58       	subi	r30, 0x81	; 129
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 81       	ld	r24, Z
    1ac8:	89 8b       	std	Y+17, r24	; 0x11
    1aca:	12 c0       	rjmp	.+36     	; 0x1af0 <KPD_u8GetPressedKey+0x180>

				/*Busy waiting until button is released*/
				while(DIO_u8GetPinValue(DIO_u8PORTA,Local_u8KPDRowArr[Local_u8RowIndex])==DIO_u8PIN_LOW)
				{
					Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1acc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ace:	48 2f       	mov	r20, r24
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	88 89       	ldd	r24, Y+16	; 0x10
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	ca 01       	movw	r24, r20
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	82 0f       	add	r24, r18
    1ae4:	93 1f       	adc	r25, r19
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	e1 58       	subi	r30, 0x81	; 129
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	89 8b       	std	Y+17, r24	; 0x11
				_delay_ms(50);

				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*Busy waiting until button is released*/
				while(DIO_u8GetPinValue(DIO_u8PORTA,Local_u8KPDRowArr[Local_u8RowIndex])==DIO_u8PIN_LOW)
    1af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	fc 01       	movw	r30, r24
    1af8:	e9 58       	subi	r30, 0x89	; 137
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	90 81       	ld	r25, Z
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	69 2f       	mov	r22, r25
    1b02:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8GetPinValue>
    1b06:	88 23       	and	r24, r24
    1b08:	09 f3       	breq	.-62     	; 0x1acc <KPD_u8GetPressedKey+0x15c>
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <KPD_u8GetPressedKey+0x1aa>
	{
		/*De-Activate current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);

		/*Check rows*/
		for(Local_u8RowIndex=0;Local_u8RowIndex<4;Local_u8RowIndex++)
    1b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
    1b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	08 f4       	brcc	.+2      	; 0x1b1a <KPD_u8GetPressedKey+0x1aa>
    1b18:	46 cf       	rjmp	.-372    	; 0x19a6 <KPD_u8GetPressedKey+0x36>
				break;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
    1b1a:	88 89       	ldd	r24, Y+16	; 0x10
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	fc 01       	movw	r30, r24
    1b22:	e5 58       	subi	r30, 0x85	; 133
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	90 81       	ld	r25, Z
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	69 2f       	mov	r22, r25
    1b2c:	41 e0       	ldi	r20, 0x01	; 1
    1b2e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_u8SetPinValue>
	static u8 Local_u8KPDColumnArr[4]={4,5,6,7};
	static u8 Local_u8KPDRowArr[4]={0,1,2,3};

	//DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<4;Local_u8ColumnIndex++)
    1b32:	88 89       	ldd	r24, Y+16	; 0x10
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	88 8b       	std	Y+16, r24	; 0x10
    1b38:	88 89       	ldd	r24, Y+16	; 0x10
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <KPD_u8GetPressedKey+0x1d0>
    1b3e:	25 cf       	rjmp	.-438    	; 0x198a <KPD_u8GetPressedKey+0x1a>

		/*Deactivate the current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1b40:	89 89       	ldd	r24, Y+17	; 0x11
}
    1b42:	61 96       	adiw	r28, 0x11	; 17
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <Calculator_Init>:
u8 Flag_1=1;
u8 Flag_2=1;
u8 Counter_1=0;
u8 Counter_2=0;
void Calculator_Init(void)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_Init();
    1b5c:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <KEYPAD_Init>
}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <Calculator_start>:

void Calculator_start(void)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	2f 97       	sbiw	r28, 0x0f	; 15
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
	u8 Pressed_key='\0';
    1b7a:	1f 86       	std	Y+15, r1	; 0x0f
    1b7c:	86 c0       	rjmp	.+268    	; 0x1c8a <Calculator_start+0x124>
	while(Flag_1==1)
	{
		/*Check if the user press On on keypad then start Application*/
		do
			{
				Pressed_key=KPD_u8GetPressedKey();
    1b7e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <KPD_u8GetPressedKey>
    1b82:	8f 87       	std	Y+15, r24	; 0x0f
			}while(Pressed_key=='\0');
    1b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b86:	88 23       	and	r24, r24
    1b88:	d1 f3       	breq	.-12     	; 0x1b7e <Calculator_start+0x18>
			if(Pressed_key=='A')
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	81 34       	cpi	r24, 0x41	; 65
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <Calculator_start+0x2c>
    1b90:	7c c0       	rjmp	.+248    	; 0x1c8a <Calculator_start+0x124>
			{
				CLCD_voidInit();
    1b92:	0e 94 1f 0a 	call	0x143e	; 0x143e <CLCD_voidInit>
				CLCD_voidSendString("Calculator ON!");
    1b96:	80 e6       	ldi	r24, 0x60	; 96
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 ad 0a 	call	0x155a	; 0x155a <CLCD_voidSendString>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	aa e7       	ldi	r26, 0x7A	; 122
    1ba4:	b3 e4       	ldi	r27, 0x43	; 67
    1ba6:	8b 87       	std	Y+11, r24	; 0x0b
    1ba8:	9c 87       	std	Y+12, r25	; 0x0c
    1baa:	ad 87       	std	Y+13, r26	; 0x0d
    1bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a ef       	ldi	r20, 0xFA	; 250
    1bbc:	54 e4       	ldi	r21, 0x44	; 68
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8f 83       	std	Y+7, r24	; 0x07
    1bc8:	98 87       	std	Y+8, r25	; 0x08
    1bca:	a9 87       	std	Y+9, r26	; 0x09
    1bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <Calculator_start+0x8a>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <Calculator_start+0x108>
	else if (__tmp > 65535)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <Calculator_start+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <Calculator_start+0xea>
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <Calculator_start+0xd8>
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <Calculator_start+0xcc>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <Calculator_start+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <Calculator_start+0x114>
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
				//CLCD_voidGoToXY(1,0);
			//	CLCD_SendNumber(123);
				_delay_ms(250);
				CLCD_voidClearDisplay();
    1c82:	0e 94 66 0b 	call	0x16cc	; 0x16cc <CLCD_voidClearDisplay>
				//Application_start();
				Flag_1=0;
    1c86:	10 92 8f 00 	sts	0x008F, r1
}

void Calculator_start(void)
{
	u8 Pressed_key='\0';
	while(Flag_1==1)
    1c8a:	80 91 8f 00 	lds	r24, 0x008F
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <Calculator_start+0x12e>
    1c92:	75 cf       	rjmp	.-278    	; 0x1b7e <Calculator_start+0x18>
				CLCD_voidClearDisplay();
				//Application_start();
				Flag_1=0;
			}
	}
}
    1c94:	2f 96       	adiw	r28, 0x0f	; 15
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <Application_start>:
void Application_start(void)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	2f 97       	sbiw	r28, 0x0f	; 15
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
	u8 First_Operand[4]={0};
    1cba:	1e 82       	std	Y+6, r1	; 0x06
    1cbc:	1f 82       	std	Y+7, r1	; 0x07
    1cbe:	18 86       	std	Y+8, r1	; 0x08
    1cc0:	19 86       	std	Y+9, r1	; 0x09
	u8 Second_Operand[4]={0};
    1cc2:	1a 86       	std	Y+10, r1	; 0x0a
    1cc4:	1b 86       	std	Y+11, r1	; 0x0b
    1cc6:	1c 86       	std	Y+12, r1	; 0x0c
    1cc8:	1d 86       	std	Y+13, r1	; 0x0d
	u16 Result=0;
    1cca:	1d 82       	std	Y+5, r1	; 0x05
    1ccc:	1c 82       	std	Y+4, r1	; 0x04
	u8 Pressed_num_1='\0';
    1cce:	1b 82       	std	Y+3, r1	; 0x03
	u8 Pressed_num_2='\0';
    1cd0:	1a 82       	std	Y+2, r1	; 0x02
	u8 Pressed_command='\0';
    1cd2:	19 82       	std	Y+1, r1	; 0x01
    1cd4:	34 c0       	rjmp	.+104    	; 0x1d3e <Application_start+0x98>
	/*Get First Number*/
	while(Flag_2==1)
	{
		do
		{
			Pressed_num_1=KPD_u8GetPressedKey();
    1cd6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <KPD_u8GetPressedKey>
    1cda:	8b 83       	std	Y+3, r24	; 0x03
		}while(Pressed_num_1=='\0');
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	88 23       	and	r24, r24
    1ce0:	d1 f3       	breq	.-12     	; 0x1cd6 <Application_start+0x30>
		if(Pressed_num_1=='+'|| Pressed_num_1=='-'|| Pressed_num_1=='*'|| Pressed_num_1=='/') //check for operation sign
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	8b 32       	cpi	r24, 0x2B	; 43
    1ce6:	49 f0       	breq	.+18     	; 0x1cfa <Application_start+0x54>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	8d 32       	cpi	r24, 0x2D	; 45
    1cec:	31 f0       	breq	.+12     	; 0x1cfa <Application_start+0x54>
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	8a 32       	cpi	r24, 0x2A	; 42
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <Application_start+0x54>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	8f 32       	cpi	r24, 0x2F	; 47
    1cf8:	39 f4       	brne	.+14     	; 0x1d08 <Application_start+0x62>
		{
			Operation_type=Pressed_num_1;
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	80 93 94 00 	sts	0x0094, r24
			CLCD_voidSendData(Pressed_num_1);
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
    1d06:	48 c0       	rjmp	.+144    	; 0x1d98 <Application_start+0xf2>
			break;
		}
		if(Pressed_num_1 == 'A') //check if the user want to restart application
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	81 34       	cpi	r24, 0x41	; 65
    1d0c:	29 f4       	brne	.+10     	; 0x1d18 <Application_start+0x72>
		{
			CLCD_voidClearDisplay();
    1d0e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <CLCD_voidClearDisplay>
			Flag_2=0;
    1d12:	10 92 90 00 	sts	0x0090, r1
    1d16:	40 c0       	rjmp	.+128    	; 0x1d98 <Application_start+0xf2>
			break;
		}
		First_Operand[Counter_1]=Pressed_num_1;
    1d18:	80 91 92 00 	lds	r24, 0x0092
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	ce 01       	movw	r24, r28
    1d22:	06 96       	adiw	r24, 0x06	; 6
    1d24:	fc 01       	movw	r30, r24
    1d26:	e2 0f       	add	r30, r18
    1d28:	f3 1f       	adc	r31, r19
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	80 83       	st	Z, r24
		CLCD_SendNumber(Pressed_num_1);
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_SendNumber>
		Counter_1++;
    1d34:	80 91 92 00 	lds	r24, 0x0092
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	80 93 92 00 	sts	0x0092, r24
	u16 Result=0;
	u8 Pressed_num_1='\0';
	u8 Pressed_num_2='\0';
	u8 Pressed_command='\0';
	/*Get First Number*/
	while(Flag_2==1)
    1d3e:	80 91 90 00 	lds	r24, 0x0090
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	41 f2       	breq	.-112    	; 0x1cd6 <Application_start+0x30>
    1d46:	28 c0       	rjmp	.+80     	; 0x1d98 <Application_start+0xf2>
	/*Get Second Number*/
	while(Flag_2==1)
	{
			do
			{
				Pressed_num_2=KPD_u8GetPressedKey();
    1d48:	0e 94 b8 0c 	call	0x1970	; 0x1970 <KPD_u8GetPressedKey>
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
			}while(Pressed_num_2=='\0');
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	88 23       	and	r24, r24
    1d52:	d1 f3       	breq	.-12     	; 0x1d48 <Application_start+0xa2>
			if(Pressed_num_2=='=') //check for equality sign to start calculations
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	8d 33       	cpi	r24, 0x3D	; 61
    1d58:	21 f4       	brne	.+8      	; 0x1d62 <Application_start+0xbc>
			{
				CLCD_voidSendData(Pressed_num_2);
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	0e 94 75 09 	call	0x12ea	; 0x12ea <CLCD_voidSendData>
    1d60:	1f c0       	rjmp	.+62     	; 0x1da0 <Application_start+0xfa>
				break;
			}
			if(Pressed_num_2=='A') //check if the user want to restart application
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	81 34       	cpi	r24, 0x41	; 65
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <Application_start+0xcc>
			{
				CLCD_voidClearDisplay();
    1d68:	0e 94 66 0b 	call	0x16cc	; 0x16cc <CLCD_voidClearDisplay>
				Flag_2=0;
    1d6c:	10 92 90 00 	sts	0x0090, r1
    1d70:	17 c0       	rjmp	.+46     	; 0x1da0 <Application_start+0xfa>
				break;
			}
			Second_Operand[Counter_2]=Pressed_num_2;
    1d72:	80 91 93 00 	lds	r24, 0x0093
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	0a 96       	adiw	r24, 0x0a	; 10
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e2 0f       	add	r30, r18
    1d82:	f3 1f       	adc	r31, r19
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	80 83       	st	Z, r24
			CLCD_SendNumber(Pressed_num_2);
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_SendNumber>
			Counter_2++;
    1d8e:	80 91 93 00 	lds	r24, 0x0093
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	80 93 93 00 	sts	0x0093, r24
		CLCD_SendNumber(Pressed_num_1);
		Counter_1++;
	}

	/*Get Second Number*/
	while(Flag_2==1)
    1d98:	80 91 90 00 	lds	r24, 0x0090
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	a1 f2       	breq	.-88     	; 0x1d48 <Application_start+0xa2>
			CLCD_SendNumber(Pressed_num_2);
			Counter_2++;
	}

	/*Start the operation*/
	switch(Operation_type)
    1da0:	80 91 94 00 	lds	r24, 0x0094
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3f 87       	std	Y+15, r19	; 0x0f
    1daa:	2e 87       	std	Y+14, r18	; 0x0e
    1dac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db0:	8b 32       	cpi	r24, 0x2B	; 43
    1db2:	91 05       	cpc	r25, r1
    1db4:	b1 f0       	breq	.+44     	; 0x1de2 <Application_start+0x13c>
    1db6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1db8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1dba:	2c 32       	cpi	r18, 0x2C	; 44
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	34 f4       	brge	.+12     	; 0x1dcc <Application_start+0x126>
    1dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dc4:	8a 32       	cpi	r24, 0x2A	; 42
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	a1 f1       	breq	.+104    	; 0x1e32 <Application_start+0x18c>
    1dca:	5a c0       	rjmp	.+180    	; 0x1e80 <Application_start+0x1da>
    1dcc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1dce:	3f 85       	ldd	r19, Y+15	; 0x0f
    1dd0:	2d 32       	cpi	r18, 0x2D	; 45
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	d1 f0       	breq	.+52     	; 0x1e0a <Application_start+0x164>
    1dd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dda:	8f 32       	cpi	r24, 0x2F	; 47
    1ddc:	91 05       	cpc	r25, r1
    1dde:	e9 f1       	breq	.+122    	; 0x1e5a <Application_start+0x1b4>
    1de0:	4f c0       	rjmp	.+158    	; 0x1e80 <Application_start+0x1da>
	{
		case '+':
			Result=Sum_Operation(First_Operand,Second_Operand,Counter_1,Counter_2);
    1de2:	40 91 92 00 	lds	r20, 0x0092
    1de6:	50 91 93 00 	lds	r21, 0x0093
    1dea:	ce 01       	movw	r24, r28
    1dec:	06 96       	adiw	r24, 0x06	; 6
    1dee:	9e 01       	movw	r18, r28
    1df0:	26 5f       	subi	r18, 0xF6	; 246
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	b9 01       	movw	r22, r18
    1df6:	25 2f       	mov	r18, r21
    1df8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <Sum_Operation>
    1dfc:	9d 83       	std	Y+5, r25	; 0x05
    1dfe:	8c 83       	std	Y+4, r24	; 0x04
			CLCD_SendNo(Result);
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	0e 94 0e 0b 	call	0x161c	; 0x161c <CLCD_SendNo>
    1e08:	3b c0       	rjmp	.+118    	; 0x1e80 <Application_start+0x1da>
			break;
		case '-':
			Result=Sub_Operation(First_Operand,Second_Operand,Counter_1,Counter_2);
    1e0a:	40 91 92 00 	lds	r20, 0x0092
    1e0e:	50 91 93 00 	lds	r21, 0x0093
    1e12:	ce 01       	movw	r24, r28
    1e14:	06 96       	adiw	r24, 0x06	; 6
    1e16:	9e 01       	movw	r18, r28
    1e18:	26 5f       	subi	r18, 0xF6	; 246
    1e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	25 2f       	mov	r18, r21
    1e20:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <Sub_Operation>
    1e24:	9d 83       	std	Y+5, r25	; 0x05
    1e26:	8c 83       	std	Y+4, r24	; 0x04
			CLCD_SendNo(Result);
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2c:	0e 94 0e 0b 	call	0x161c	; 0x161c <CLCD_SendNo>
    1e30:	27 c0       	rjmp	.+78     	; 0x1e80 <Application_start+0x1da>
			break;
		case '*':
			Result=Multiply_Operation(First_Operand,Second_Operand,Counter_1,Counter_2);
    1e32:	40 91 92 00 	lds	r20, 0x0092
    1e36:	50 91 93 00 	lds	r21, 0x0093
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	06 96       	adiw	r24, 0x06	; 6
    1e3e:	9e 01       	movw	r18, r28
    1e40:	26 5f       	subi	r18, 0xF6	; 246
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	b9 01       	movw	r22, r18
    1e46:	25 2f       	mov	r18, r21
    1e48:	0e 94 6f 10 	call	0x20de	; 0x20de <Multiply_Operation>
    1e4c:	9d 83       	std	Y+5, r25	; 0x05
    1e4e:	8c 83       	std	Y+4, r24	; 0x04
			CLCD_SendNo(Result);
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	0e 94 0e 0b 	call	0x161c	; 0x161c <CLCD_SendNo>
    1e58:	13 c0       	rjmp	.+38     	; 0x1e80 <Application_start+0x1da>
			break;
		case '/':
			Result=Division_Operation(First_Operand,Second_Operand,Counter_1,Counter_2);
    1e5a:	40 91 92 00 	lds	r20, 0x0092
    1e5e:	50 91 93 00 	lds	r21, 0x0093
    1e62:	ce 01       	movw	r24, r28
    1e64:	06 96       	adiw	r24, 0x06	; 6
    1e66:	9e 01       	movw	r18, r28
    1e68:	26 5f       	subi	r18, 0xF6	; 246
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	b9 01       	movw	r22, r18
    1e6e:	25 2f       	mov	r18, r21
    1e70:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <Division_Operation>
    1e74:	9d 83       	std	Y+5, r25	; 0x05
    1e76:	8c 83       	std	Y+4, r24	; 0x04
			CLCD_SendNo(Result);
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7c:	0e 94 0e 0b 	call	0x161c	; 0x161c <CLCD_SendNo>
			break;
	}
	/*Clear the used variables to avoid corruption data*/
	Result=0;
    1e80:	1d 82       	std	Y+5, r1	; 0x05
    1e82:	1c 82       	std	Y+4, r1	; 0x04
	Counter_1=0;
    1e84:	10 92 92 00 	sts	0x0092, r1
	Counter_2=0;
    1e88:	10 92 93 00 	sts	0x0093, r1
    1e8c:	0c c0       	rjmp	.+24     	; 0x1ea6 <Application_start+0x200>
	/*Press clear button to clear display*/
	while(Flag_2==1)
	{
		do
		{
			Pressed_command=KPD_u8GetPressedKey();
    1e8e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <KPD_u8GetPressedKey>
    1e92:	89 83       	std	Y+1, r24	; 0x01
		}while(Pressed_command=='\0');
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	88 23       	and	r24, r24
    1e98:	d1 f3       	breq	.-12     	; 0x1e8e <Application_start+0x1e8>
		if(Pressed_command=='A')
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	81 34       	cpi	r24, 0x41	; 65
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <Application_start+0x200>
		{
			CLCD_voidClearDisplay();
    1ea0:	0e 94 66 0b 	call	0x16cc	; 0x16cc <CLCD_voidClearDisplay>
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <Application_start+0x21e>
	/*Clear the used variables to avoid corruption data*/
	Result=0;
	Counter_1=0;
	Counter_2=0;
	/*Press clear button to clear display*/
	while(Flag_2==1)
    1ea6:	80 91 90 00 	lds	r24, 0x0090
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	81 f3       	breq	.-32     	; 0x1e8e <Application_start+0x1e8>
    1eae:	0a c0       	rjmp	.+20     	; 0x1ec4 <Application_start+0x21e>
		}
	}
	/*when flag 2 = 0 then we are going to restart the Application again*/
	while(Flag_2==0)
	{
		Pressed_num_1=0;
    1eb0:	1b 82       	std	Y+3, r1	; 0x03
		Pressed_num_2=0;
    1eb2:	1a 82       	std	Y+2, r1	; 0x02
		Pressed_command=0;
    1eb4:	19 82       	std	Y+1, r1	; 0x01
		First_Operand[4]=0;
    1eb6:	1a 86       	std	Y+10, r1	; 0x0a
		Second_Operand[4]=0;
    1eb8:	1e 86       	std	Y+14, r1	; 0x0e
		CLCD_voidClearDisplay();
    1eba:	0e 94 66 0b 	call	0x16cc	; 0x16cc <CLCD_voidClearDisplay>
		Flag_2=1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	80 93 90 00 	sts	0x0090, r24
			CLCD_voidClearDisplay();
			break;
		}
	}
	/*when flag 2 = 0 then we are going to restart the Application again*/
	while(Flag_2==0)
    1ec4:	80 91 90 00 	lds	r24, 0x0090
    1ec8:	88 23       	and	r24, r24
    1eca:	91 f3       	breq	.-28     	; 0x1eb0 <Application_start+0x20a>
		First_Operand[4]=0;
		Second_Operand[4]=0;
		CLCD_voidClearDisplay();
		Flag_2=1;
	}
}
    1ecc:	2f 96       	adiw	r28, 0x0f	; 15
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <Sum_Operation>:


/*Functions Operations*/
u16 Sum_Operation(u8 No_1[],u8 No_2[],u8 Counter_1,u8 Counter_2)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	9a 87       	std	Y+10, r25	; 0x0a
    1ef4:	89 87       	std	Y+9, r24	; 0x09
    1ef6:	7c 87       	std	Y+12, r23	; 0x0c
    1ef8:	6b 87       	std	Y+11, r22	; 0x0b
    1efa:	4d 87       	std	Y+13, r20	; 0x0d
    1efc:	2e 87       	std	Y+14, r18	; 0x0e
	u16 Number1=No_1[0];
    1efe:	e9 85       	ldd	r30, Y+9	; 0x09
    1f00:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f02:	80 81       	ld	r24, Z
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	98 87       	std	Y+8, r25	; 0x08
    1f0a:	8f 83       	std	Y+7, r24	; 0x07
	u16 Number2=No_2[0];
    1f0c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1f0e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1f10:	80 81       	ld	r24, Z
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
	u16 result=0;
    1f1a:	1c 82       	std	Y+4, r1	; 0x04
    1f1c:	1b 82       	std	Y+3, r1	; 0x03
	/*Get First Number*/
	for(u8 Counter=1;Counter<Counter_1;Counter++)
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	8a 83       	std	Y+2, r24	; 0x02
    1f22:	1f c0       	rjmp	.+62     	; 0x1f62 <Sum_Operation+0x84>
	{
		Number1= Number1*10+No_1[Counter];
    1f24:	8f 81       	ldd	r24, Y+7	; 0x07
    1f26:	98 85       	ldd	r25, Y+8	; 0x08
    1f28:	9c 01       	movw	r18, r24
    1f2a:	22 0f       	add	r18, r18
    1f2c:	33 1f       	adc	r19, r19
    1f2e:	c9 01       	movw	r24, r18
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	a9 01       	movw	r20, r18
    1f3a:	48 0f       	add	r20, r24
    1f3c:	59 1f       	adc	r21, r25
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e2 0f       	add	r30, r18
    1f4c:	f3 1f       	adc	r31, r19
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	84 0f       	add	r24, r20
    1f56:	95 1f       	adc	r25, r21
    1f58:	98 87       	std	Y+8, r25	; 0x08
    1f5a:	8f 83       	std	Y+7, r24	; 0x07
{
	u16 Number1=No_1[0];
	u16 Number2=No_2[0];
	u16 result=0;
	/*Get First Number*/
	for(u8 Counter=1;Counter<Counter_1;Counter++)
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	98 17       	cp	r25, r24
    1f68:	e8 f2       	brcs	.-70     	; 0x1f24 <Sum_Operation+0x46>
	{
		Number1= Number1*10+No_1[Counter];
	}
	/*Get Second Number*/
	for(u8 Counter=1;Counter<Counter_2;Counter++)
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	1f c0       	rjmp	.+62     	; 0x1fae <Sum_Operation+0xd0>
	{
		Number2= Number2*10+No_1[Counter];
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	9c 01       	movw	r18, r24
    1f76:	22 0f       	add	r18, r18
    1f78:	33 1f       	adc	r19, r19
    1f7a:	c9 01       	movw	r24, r18
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	a9 01       	movw	r20, r18
    1f86:	48 0f       	add	r20, r24
    1f88:	59 1f       	adc	r21, r25
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	fc 01       	movw	r30, r24
    1f96:	e2 0f       	add	r30, r18
    1f98:	f3 1f       	adc	r31, r19
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	84 0f       	add	r24, r20
    1fa2:	95 1f       	adc	r25, r21
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
	for(u8 Counter=1;Counter<Counter_1;Counter++)
	{
		Number1= Number1*10+No_1[Counter];
	}
	/*Get Second Number*/
	for(u8 Counter=1;Counter<Counter_2;Counter++)
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	99 81       	ldd	r25, Y+1	; 0x01
    1fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb2:	98 17       	cp	r25, r24
    1fb4:	e8 f2       	brcs	.-70     	; 0x1f70 <Sum_Operation+0x92>
	{
		Number2= Number2*10+No_1[Counter];
	}
	/*Operation*/
	result= Number1+Number2;
    1fb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fb8:	38 85       	ldd	r19, Y+8	; 0x08
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	82 0f       	add	r24, r18
    1fc0:	93 1f       	adc	r25, r19
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
	return result;
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1fca:	2e 96       	adiw	r28, 0x0e	; 14
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <Sub_Operation>:
u16 Sub_Operation(u8 No_1[],u8 No_2[],u8 Counter_1,u8 Counter_2)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	2e 97       	sbiw	r28, 0x0e	; 14
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	9a 87       	std	Y+10, r25	; 0x0a
    1ff2:	89 87       	std	Y+9, r24	; 0x09
    1ff4:	7c 87       	std	Y+12, r23	; 0x0c
    1ff6:	6b 87       	std	Y+11, r22	; 0x0b
    1ff8:	4d 87       	std	Y+13, r20	; 0x0d
    1ffa:	2e 87       	std	Y+14, r18	; 0x0e
	u16 Number1=No_1[0];
    1ffc:	e9 85       	ldd	r30, Y+9	; 0x09
    1ffe:	fa 85       	ldd	r31, Y+10	; 0x0a
    2000:	80 81       	ld	r24, Z
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	98 87       	std	Y+8, r25	; 0x08
    2008:	8f 83       	std	Y+7, r24	; 0x07
	u16 Number2=No_2[0];
    200a:	eb 85       	ldd	r30, Y+11	; 0x0b
    200c:	fc 85       	ldd	r31, Y+12	; 0x0c
    200e:	80 81       	ld	r24, Z
    2010:	88 2f       	mov	r24, r24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
	u16 result=0;
    2018:	1c 82       	std	Y+4, r1	; 0x04
    201a:	1b 82       	std	Y+3, r1	; 0x03
	/*Get First Number*/
	for(u8 Counter=1;Counter<Counter_1;Counter++)
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	1f c0       	rjmp	.+62     	; 0x2060 <Sub_Operation+0x84>
	{
		Number1= Number1*10+No_1[Counter];
    2022:	8f 81       	ldd	r24, Y+7	; 0x07
    2024:	98 85       	ldd	r25, Y+8	; 0x08
    2026:	9c 01       	movw	r18, r24
    2028:	22 0f       	add	r18, r18
    202a:	33 1f       	adc	r19, r19
    202c:	c9 01       	movw	r24, r18
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	a9 01       	movw	r20, r18
    2038:	48 0f       	add	r20, r24
    203a:	59 1f       	adc	r21, r25
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	fc 01       	movw	r30, r24
    2048:	e2 0f       	add	r30, r18
    204a:	f3 1f       	adc	r31, r19
    204c:	80 81       	ld	r24, Z
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	84 0f       	add	r24, r20
    2054:	95 1f       	adc	r25, r21
    2056:	98 87       	std	Y+8, r25	; 0x08
    2058:	8f 83       	std	Y+7, r24	; 0x07
{
	u16 Number1=No_1[0];
	u16 Number2=No_2[0];
	u16 result=0;
	/*Get First Number*/
	for(u8 Counter=1;Counter<Counter_1;Counter++)
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	8f 5f       	subi	r24, 0xFF	; 255
    205e:	8a 83       	std	Y+2, r24	; 0x02
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	8d 85       	ldd	r24, Y+13	; 0x0d
    2064:	98 17       	cp	r25, r24
    2066:	e8 f2       	brcs	.-70     	; 0x2022 <Sub_Operation+0x46>
	{
		Number1= Number1*10+No_1[Counter];
	}
	/*Get Second Number*/
	for(u8 Counter=1;Counter<Counter_2;Counter++)
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	1f c0       	rjmp	.+62     	; 0x20ac <Sub_Operation+0xd0>
	{
		Number2= Number2*10+No_1[Counter];
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	9c 01       	movw	r18, r24
    2074:	22 0f       	add	r18, r18
    2076:	33 1f       	adc	r19, r19
    2078:	c9 01       	movw	r24, r18
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	a9 01       	movw	r20, r18
    2084:	48 0f       	add	r20, r24
    2086:	59 1f       	adc	r21, r25
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	fc 01       	movw	r30, r24
    2094:	e2 0f       	add	r30, r18
    2096:	f3 1f       	adc	r31, r19
    2098:	80 81       	ld	r24, Z
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	84 0f       	add	r24, r20
    20a0:	95 1f       	adc	r25, r21
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
	for(u8 Counter=1;Counter<Counter_1;Counter++)
	{
		Number1= Number1*10+No_1[Counter];
	}
	/*Get Second Number*/
	for(u8 Counter=1;Counter<Counter_2;Counter++)
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	99 81       	ldd	r25, Y+1	; 0x01
    20ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b0:	98 17       	cp	r25, r24
    20b2:	e8 f2       	brcs	.-70     	; 0x206e <Sub_Operation+0x92>
	{
		Number2= Number2*10+No_1[Counter];
	}
	/*Operation*/
	result= Number1-Number2;
    20b4:	2f 81       	ldd	r18, Y+7	; 0x07
    20b6:	38 85       	ldd	r19, Y+8	; 0x08
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	a9 01       	movw	r20, r18
    20be:	48 1b       	sub	r20, r24
    20c0:	59 0b       	sbc	r21, r25
    20c2:	ca 01       	movw	r24, r20
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
	return result;
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
}
    20cc:	2e 96       	adiw	r28, 0x0e	; 14
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <Multiply_Operation>:
u16 Multiply_Operation(u8 No_1[],u8 No_2[],u8 Counter_1,u8 Counter_2)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	2e 97       	sbiw	r28, 0x0e	; 14
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	9a 87       	std	Y+10, r25	; 0x0a
    20f4:	89 87       	std	Y+9, r24	; 0x09
    20f6:	7c 87       	std	Y+12, r23	; 0x0c
    20f8:	6b 87       	std	Y+11, r22	; 0x0b
    20fa:	4d 87       	std	Y+13, r20	; 0x0d
    20fc:	2e 87       	std	Y+14, r18	; 0x0e
	u16 Number1=No_1[0];
    20fe:	e9 85       	ldd	r30, Y+9	; 0x09
    2100:	fa 85       	ldd	r31, Y+10	; 0x0a
    2102:	80 81       	ld	r24, Z
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	98 87       	std	Y+8, r25	; 0x08
    210a:	8f 83       	std	Y+7, r24	; 0x07
		u16 Number2=No_2[0];
    210c:	eb 85       	ldd	r30, Y+11	; 0x0b
    210e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2110:	80 81       	ld	r24, Z
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
		u16 result=0;
    211a:	1c 82       	std	Y+4, r1	; 0x04
    211c:	1b 82       	std	Y+3, r1	; 0x03
		/*Get First Number*/
		for(u8 Counter=1;Counter<Counter_1;Counter++)
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	1f c0       	rjmp	.+62     	; 0x2162 <Multiply_Operation+0x84>
		{
			Number1= Number1*10+No_1[Counter];
    2124:	8f 81       	ldd	r24, Y+7	; 0x07
    2126:	98 85       	ldd	r25, Y+8	; 0x08
    2128:	9c 01       	movw	r18, r24
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	c9 01       	movw	r24, r18
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	a9 01       	movw	r20, r18
    213a:	48 0f       	add	r20, r24
    213c:	59 1f       	adc	r21, r25
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	fc 01       	movw	r30, r24
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	80 81       	ld	r24, Z
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	84 0f       	add	r24, r20
    2156:	95 1f       	adc	r25, r21
    2158:	98 87       	std	Y+8, r25	; 0x08
    215a:	8f 83       	std	Y+7, r24	; 0x07
{
	u16 Number1=No_1[0];
		u16 Number2=No_2[0];
		u16 result=0;
		/*Get First Number*/
		for(u8 Counter=1;Counter<Counter_1;Counter++)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	98 17       	cp	r25, r24
    2168:	e8 f2       	brcs	.-70     	; 0x2124 <Multiply_Operation+0x46>
		{
			Number1= Number1*10+No_1[Counter];
		}
		/*Get Second Number*/
		for(u8 Counter=1;Counter<Counter_2;Counter++)
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	1f c0       	rjmp	.+62     	; 0x21ae <Multiply_Operation+0xd0>
		{
			Number2= Number2*10+No_1[Counter];
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	9c 01       	movw	r18, r24
    2176:	22 0f       	add	r18, r18
    2178:	33 1f       	adc	r19, r19
    217a:	c9 01       	movw	r24, r18
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	a9 01       	movw	r20, r18
    2186:	48 0f       	add	r20, r24
    2188:	59 1f       	adc	r21, r25
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	fc 01       	movw	r30, r24
    2196:	e2 0f       	add	r30, r18
    2198:	f3 1f       	adc	r31, r19
    219a:	80 81       	ld	r24, Z
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	84 0f       	add	r24, r20
    21a2:	95 1f       	adc	r25, r21
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
		for(u8 Counter=1;Counter<Counter_1;Counter++)
		{
			Number1= Number1*10+No_1[Counter];
		}
		/*Get Second Number*/
		for(u8 Counter=1;Counter<Counter_2;Counter++)
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	8f 5f       	subi	r24, 0xFF	; 255
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	99 81       	ldd	r25, Y+1	; 0x01
    21b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b2:	98 17       	cp	r25, r24
    21b4:	e8 f2       	brcs	.-70     	; 0x2170 <Multiply_Operation+0x92>
		{
			Number2= Number2*10+No_1[Counter];
		}
		/*Operation*/
		result= Number1*Number2;
    21b6:	2f 81       	ldd	r18, Y+7	; 0x07
    21b8:	38 85       	ldd	r19, Y+8	; 0x08
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	ac 01       	movw	r20, r24
    21c0:	24 9f       	mul	r18, r20
    21c2:	c0 01       	movw	r24, r0
    21c4:	25 9f       	mul	r18, r21
    21c6:	90 0d       	add	r25, r0
    21c8:	34 9f       	mul	r19, r20
    21ca:	90 0d       	add	r25, r0
    21cc:	11 24       	eor	r1, r1
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		return result;
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    21d6:	2e 96       	adiw	r28, 0x0e	; 14
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <Division_Operation>:
u16 Division_Operation(u8 No_1[],u8 No_2[],u8 Counter_1,u8 Counter_2)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	2e 97       	sbiw	r28, 0x0e	; 14
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	9a 87       	std	Y+10, r25	; 0x0a
    21fe:	89 87       	std	Y+9, r24	; 0x09
    2200:	7c 87       	std	Y+12, r23	; 0x0c
    2202:	6b 87       	std	Y+11, r22	; 0x0b
    2204:	4d 87       	std	Y+13, r20	; 0x0d
    2206:	2e 87       	std	Y+14, r18	; 0x0e
	u16 Number1=No_1[0];
    2208:	e9 85       	ldd	r30, Y+9	; 0x09
    220a:	fa 85       	ldd	r31, Y+10	; 0x0a
    220c:	80 81       	ld	r24, Z
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	8f 83       	std	Y+7, r24	; 0x07
		u16 Number2=No_2[0];
    2216:	eb 85       	ldd	r30, Y+11	; 0x0b
    2218:	fc 85       	ldd	r31, Y+12	; 0x0c
    221a:	80 81       	ld	r24, Z
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
		u16 result=0;
    2224:	1c 82       	std	Y+4, r1	; 0x04
    2226:	1b 82       	std	Y+3, r1	; 0x03
		/*Get First Number*/
		for(u8 Counter=1;Counter<Counter_1;Counter++)
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	8a 83       	std	Y+2, r24	; 0x02
    222c:	1f c0       	rjmp	.+62     	; 0x226c <Division_Operation+0x84>
		{
			Number1= Number1*10+No_1[Counter];
    222e:	8f 81       	ldd	r24, Y+7	; 0x07
    2230:	98 85       	ldd	r25, Y+8	; 0x08
    2232:	9c 01       	movw	r18, r24
    2234:	22 0f       	add	r18, r18
    2236:	33 1f       	adc	r19, r19
    2238:	c9 01       	movw	r24, r18
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	a9 01       	movw	r20, r18
    2244:	48 0f       	add	r20, r24
    2246:	59 1f       	adc	r21, r25
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	fc 01       	movw	r30, r24
    2254:	e2 0f       	add	r30, r18
    2256:	f3 1f       	adc	r31, r19
    2258:	80 81       	ld	r24, Z
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	84 0f       	add	r24, r20
    2260:	95 1f       	adc	r25, r21
    2262:	98 87       	std	Y+8, r25	; 0x08
    2264:	8f 83       	std	Y+7, r24	; 0x07
{
	u16 Number1=No_1[0];
		u16 Number2=No_2[0];
		u16 result=0;
		/*Get First Number*/
		for(u8 Counter=1;Counter<Counter_1;Counter++)
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	8a 83       	std	Y+2, r24	; 0x02
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	98 17       	cp	r25, r24
    2272:	e8 f2       	brcs	.-70     	; 0x222e <Division_Operation+0x46>
		{
			Number1= Number1*10+No_1[Counter];
		}
		/*Get Second Number*/
		for(u8 Counter=1;Counter<Counter_2;Counter++)
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	1f c0       	rjmp	.+62     	; 0x22b8 <Division_Operation+0xd0>
		{
			Number2= Number2*10+No_1[Counter];
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	9c 01       	movw	r18, r24
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	c9 01       	movw	r24, r18
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	a9 01       	movw	r20, r18
    2290:	48 0f       	add	r20, r24
    2292:	59 1f       	adc	r21, r25
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	fc 01       	movw	r30, r24
    22a0:	e2 0f       	add	r30, r18
    22a2:	f3 1f       	adc	r31, r19
    22a4:	80 81       	ld	r24, Z
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	84 0f       	add	r24, r20
    22ac:	95 1f       	adc	r25, r21
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
		for(u8 Counter=1;Counter<Counter_1;Counter++)
		{
			Number1= Number1*10+No_1[Counter];
		}
		/*Get Second Number*/
		for(u8 Counter=1;Counter<Counter_2;Counter++)
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	99 81       	ldd	r25, Y+1	; 0x01
    22ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    22bc:	98 17       	cp	r25, r24
    22be:	e8 f2       	brcs	.-70     	; 0x227a <Division_Operation+0x92>
		{
			Number2= Number2*10+No_1[Counter];
		}
		/*Operation*/
		result= Number1/Number2;
    22c0:	8f 81       	ldd	r24, Y+7	; 0x07
    22c2:	98 85       	ldd	r25, Y+8	; 0x08
    22c4:	2d 81       	ldd	r18, Y+5	; 0x05
    22c6:	3e 81       	ldd	r19, Y+6	; 0x06
    22c8:	b9 01       	movw	r22, r18
    22ca:	0e 94 80 11 	call	0x2300	; 0x2300 <__udivmodhi4>
    22ce:	cb 01       	movw	r24, r22
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
		return result;
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04

}
    22d8:	2e 96       	adiw	r28, 0x0e	; 14
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <main>:




int main(void)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
	Calculator_Init();
    22f2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Calculator_Init>
	Calculator_start();
    22f6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Calculator_start>
	while(1)
	{
		Application_start();
    22fa:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Application_start>
    22fe:	fd cf       	rjmp	.-6      	; 0x22fa <main+0x10>

00002300 <__udivmodhi4>:
    2300:	aa 1b       	sub	r26, r26
    2302:	bb 1b       	sub	r27, r27
    2304:	51 e1       	ldi	r21, 0x11	; 17
    2306:	07 c0       	rjmp	.+14     	; 0x2316 <__udivmodhi4_ep>

00002308 <__udivmodhi4_loop>:
    2308:	aa 1f       	adc	r26, r26
    230a:	bb 1f       	adc	r27, r27
    230c:	a6 17       	cp	r26, r22
    230e:	b7 07       	cpc	r27, r23
    2310:	10 f0       	brcs	.+4      	; 0x2316 <__udivmodhi4_ep>
    2312:	a6 1b       	sub	r26, r22
    2314:	b7 0b       	sbc	r27, r23

00002316 <__udivmodhi4_ep>:
    2316:	88 1f       	adc	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	5a 95       	dec	r21
    231c:	a9 f7       	brne	.-22     	; 0x2308 <__udivmodhi4_loop>
    231e:	80 95       	com	r24
    2320:	90 95       	com	r25
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	08 95       	ret

00002328 <__prologue_saves__>:
    2328:	2f 92       	push	r2
    232a:	3f 92       	push	r3
    232c:	4f 92       	push	r4
    232e:	5f 92       	push	r5
    2330:	6f 92       	push	r6
    2332:	7f 92       	push	r7
    2334:	8f 92       	push	r8
    2336:	9f 92       	push	r9
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	cf 92       	push	r12
    233e:	df 92       	push	r13
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	ca 1b       	sub	r28, r26
    2352:	db 0b       	sbc	r29, r27
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	09 94       	ijmp

00002360 <__epilogue_restores__>:
    2360:	2a 88       	ldd	r2, Y+18	; 0x12
    2362:	39 88       	ldd	r3, Y+17	; 0x11
    2364:	48 88       	ldd	r4, Y+16	; 0x10
    2366:	5f 84       	ldd	r5, Y+15	; 0x0f
    2368:	6e 84       	ldd	r6, Y+14	; 0x0e
    236a:	7d 84       	ldd	r7, Y+13	; 0x0d
    236c:	8c 84       	ldd	r8, Y+12	; 0x0c
    236e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2370:	aa 84       	ldd	r10, Y+10	; 0x0a
    2372:	b9 84       	ldd	r11, Y+9	; 0x09
    2374:	c8 84       	ldd	r12, Y+8	; 0x08
    2376:	df 80       	ldd	r13, Y+7	; 0x07
    2378:	ee 80       	ldd	r14, Y+6	; 0x06
    237a:	fd 80       	ldd	r15, Y+5	; 0x05
    237c:	0c 81       	ldd	r16, Y+4	; 0x04
    237e:	1b 81       	ldd	r17, Y+3	; 0x03
    2380:	aa 81       	ldd	r26, Y+2	; 0x02
    2382:	b9 81       	ldd	r27, Y+1	; 0x01
    2384:	ce 0f       	add	r28, r30
    2386:	d1 1d       	adc	r29, r1
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	ed 01       	movw	r28, r26
    2394:	08 95       	ret

00002396 <_exit>:
    2396:	f8 94       	cli

00002398 <__stop_program>:
    2398:	ff cf       	rjmp	.-2      	; 0x2398 <__stop_program>
